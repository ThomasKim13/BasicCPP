#include <iostream>
#define _USE_MATH_DEFINES //https://www.quantstart.com/articles/Mathematical-Constants-in-C/
#include <string>
#include <cmath>
using namespace std;
class Shape{
    public:
        Shape(double dHeight, double dWidth);
        virtual ~Shape();
        virtual void scale (double dScaleFactor) = 0;
        virtual double area() = 0;
        virtual double perimeter() = 0;
        virtual void displayProperties();
    protected:
        double m_dHeight;
        double m_dWidth;
        string m_strType;

};
Shape::Shape(double dHeight, double dWidth): m_dWidth(dWidth),m_dHeight(dHeight), m_strType("Cirle"){}
Shape::~Shape(){
    cout << "Deconstructor called" << endl;
 
}
void Shape::displayProperties(){
    cout << "Shape Type: " << m_strType << " " << "Width: " << m_dWidth << " Height: " << m_dHeight << endl;
    cout << "Area: " << area() << ", " << "Perimeter: " << perimeter() << endl;
}
class Rectangle: public Shape{
    public:
        Rectangle(double dHeight, double dWidth);
        virtual ~Rectangle();
        void scale(double dScaleFactor);
        double area();
        double perimeter();
};
Rectangle::Rectangle(double dHeight, double dWidth) : Shape(dHeight,dWidth){
    this->m_strType = "Rectangle";
}
Rectangle::~Rectangle(){
    cout << "Rectangle deconstructor called" << endl;
    
}
void Rectangle::scale(double dScaleFactor){
    m_dHeight *= dScaleFactor;
    m_dWidth *= dScaleFactor;
}
double Rectangle::area(){
    return m_dHeight * m_dWidth;
}
double Rectangle::perimeter(){
    return m_dHeight + m_dWidth;
}
class Circle : public Shape{
    public:
        Circle(double dHeight, double dWidth);
        virtual ~Circle();
        void scale(double dScaleFactor);
        double area();
        double perimeter();
};
Circle::Circle(double dHeight, double dWidth) : Shape(dHeight,dWidth){
    this->m_strType = "Circle";
}
Circle::~Circle(){
    cout << "Circle Deconstructor called" << endl;
}
void Circle::scale(double dScaleFactor){
    m_dHeight *= dScaleFactor;
    m_dWidth *= dScaleFactor;
}
double Circle:: area(){
    return 0.25 *  M_PI * pow(m_dHeight,2.0);
}
double Circle:: perimeter(){
    return M_PI * m_dHeight;
}

int main(){
    Rectangle* p_shapeRectangle = new Rectangle(2.0,3.0);
    Circle* p_shapeCircle = new Circle(2.0,2.0);
    Shape* p_shapes[2];
    p_shapes[0] = p_shapeCircle;
    p_shapes[1] = p_shapeRectangle;
    int length = *(&p_shapes + 1) - p_shapes; //https://www.tutorialspoint.com/how-do-i-find-the-length-of-an-array-in-c-cplusplus
    //using sizeof(p_shapes) caused segmentation fault
   
    for(int i = 0; i < length; i++){
        p_shapes[i]->displayProperties();
        p_shapes[i]->scale(2.0);
        p_shapes[i]->displayProperties();
    }
    
    
}



